"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/smash-move-viewer/index.html","27953efcbf2bceaba80e5413ef96a9a6"],["/smash-move-viewer/static/css/main.ec60b8d6.css","5572b8d6dd0419995f6be003a534152f"],["/smash-move-viewer/static/js/main.c18ec1a6.js","7216bc1320460abddea75afc020fc4fd"],["/smash-move-viewer/static/media/272-cross.49807d76.svg","49807d767189bc5b162e5fe5f313dcb9"],["/smash-move-viewer/static/media/285-play3.56dc70c2.svg","56dc70c2f10d49acb24fb790908cbd29"],["/smash-move-viewer/static/media/286-pause2.7ffb735f.svg","7ffb735f2d963c5531f4f7758955d215"],["/smash-move-viewer/static/media/288-backward2.984d96fc.svg","984d96fc044b63a62ff76a2a8df80391"],["/smash-move-viewer/static/media/289-forward3.69d29054.svg","69d2905472d6634282f94ddcaae04389"],["/smash-move-viewer/static/media/290-first.752ad60c.svg","752ad60cd2ba496a04340a1854fa059b"],["/smash-move-viewer/static/media/291-last.06bba1f2.svg","06bba1f228bc12a20e45b03cd0a81b7c"],["/smash-move-viewer/static/media/292-previous2.a7ca63b3.svg","a7ca63b3c8346b491d0a614e5a1a95bc"],["/smash-move-viewer/static/media/293-next2.ca943667.svg","ca94366773f610fbf908017c910dcda2"],["/smash-move-viewer/static/media/302-loop.dafc8fe6.svg","dafc8fe649a47e99181ebd24e126cea2"],["/smash-move-viewer/static/media/SmashBall.88703ae0.svg","88703ae0ad6de2bbe72869ad3466a171"],["/smash-move-viewer/static/media/twitter.44b08116.svg","44b08116ff98795da9e8d107cb734d1d"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,a){var t=new URL(e);return"/"===t.pathname.slice(-1)&&(t.pathname+=a),t.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(a){return new Response(a,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,a,t,s){var r=new URL(e);return s&&r.pathname.match(s)||(r.search+=(r.search?"&":"")+encodeURIComponent(a)+"="+encodeURIComponent(t)),r.toString()},isPathWhitelisted=function(e,a){if(0===e.length)return!0;var t=new URL(a).pathname;return e.some(function(e){return t.match(e)})},stripIgnoredUrlParameters=function(e,a){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return a.every(function(a){return!a.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var a=e[0],t=e[1],s=new URL(a,self.location),r=createCacheKey(s,hashParamName,t,/\.\w{8}\./);return[s.toString(),r]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!a.has(t)){var s=new Request(t,{credentials:"same-origin"});return fetch(s).then(function(a){if(!a.ok)throw new Error("Request for "+t+" returned a response with status "+a.status);return cleanResponse(a).then(function(a){return e.put(t,a)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(t){return Promise.all(t.map(function(t){if(!a.has(t.url))return e.delete(t)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var a,t=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching);(a=urlsToCacheKeys.has(t))||(t=addDirectoryIndex(t,"index.html"),a=urlsToCacheKeys.has(t));!a&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(t=new URL("/smash-move-viewer/index.html",self.location).toString(),a=urlsToCacheKeys.has(t)),a&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(t)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(a){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,a),fetch(e.request)}))}});